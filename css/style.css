@charset "UTF-8";
@font-face {
  font-family: "Heebo";
  src: url(./fonts/Heebo-Light.woff2) format("woff2");
  font-weight: 300;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Heebo";
  src: url(./fonts/Heebo-Bold.woff2) format("woff2");
  font-weight: 700;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Yantramanav";
  src: url(./fonts/Yantramanav-Bold.woff2) format("woff2");
  font-weight: 700;
  font-style: normal;
  font-display: swap;
}
body {
  background-color: var(--color-dark);
  font-family: var(--font-family-base);
  color: var(--color-light-grey);
  font-size: 16px;
  line-height: 1.75;
}

a {
  color: var(--color-light);
}

a:hover {
  color: var(--color-light-grey);
}

a,
button,
input,
textarea,
svg * {
  transition-duration: var(--transition-duration);
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: 700;
  text-transform: uppercase;
}

.visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  border: 0;
  padding: 0;
  white-space: nowrap;
  -webkit-clip-path: inset(100%);
          clip-path: inset(100%);
  clip: rect(0 0 0 0);
  overflow: hidden;
}

/**
  Нормализация блочной модели
 */
*,
::before,
::after {
  box-sizing: border-box;
}

/**
  Убираем внутренние отступы слева тегам списков,
  у которых есть атрибут class
 */
:where(ul, ol):where([class]) {
  padding-left: 0;
}

/**
  Убираем внешние отступы body и двум другим тегам,
  у которых есть атрибут class
 */
body,
:where(blockquote, figure):where([class]) {
  margin: 0;
}

/**
  Убираем внешние отступы вертикали нужным тегам,
  у которых есть атрибут class
 */
:where(h1,
h2,
h3,
h4,
h5,
h6,
p,
ul,
ol,
dl):where([class]) {
  margin-block: 0;
}

:where(dd[class]) {
  margin-left: 0;
}

:where(fieldset[class]) {
  margin-left: 0;
  padding: 0;
  border: none;
}

/**
  Убираем стандартный маркер маркированному списку,
  у которого есть атрибут class
 */
:where(ul[class]) {
  list-style: none;
}

:where(address[class]) {
  font-style: normal;
}

/**
  Обнуляем вертикальные внешние отступы параграфа,
  объявляем локальную переменную для внешнего отступа вниз,
  чтобы избежать взаимодействие с более сложным селектором
 */
p {
  --paragraphMarginBottom: 24px;
  margin-block: 0;
}

/**
  Внешний отступ вниз для параграфа без атрибута class,
  который расположен не последним среди своих соседних элементов
 */
p:where(:not([class]):not(:last-child)) {
  margin-bottom: var(--paragraphMarginBottom);
}

/**
  Упрощаем работу с изображениями и видео
 */
img,
video {
  display: block;
  max-width: 100%;
  height: auto;
}

/**
  Наследуем свойства шрифт для полей ввода
 */
input,
textarea,
select,
button {
  font: inherit;
}

html {
  /**
    Пригодится в большинстве ситуаций
    (когда, например, нужно будет "прижать" футер к низу сайта)
   */
  height: 100%;
  /**
    Убираем скачок интерфейса по горизонтали
    при появлении / исчезновении скроллбара
   */
  scrollbar-gutter: stable;
}

/**
  Плавный скролл
 */
html,
:has(:target) {
  scroll-behavior: smooth;
}

body {
  /**
    Пригодится в большинстве ситуаций
    (когда, например, нужно будет "прижать" футер к низу сайта)
   */
  min-height: 100%;
  /**
    Унифицированный интерлиньяж
   */
  line-height: 1.5;
}

/**
  Нормализация высоты элемента ссылки при его инспектировании в DevTools
 */
a:where([class]) {
  display: inline-flex;
}

/**
  Курсор-рука при наведении на элемент
 */
button,
label {
  cursor: pointer;
}

/**
  Приводим к единому цвету svg-элементы
  (за исключением тех, у которых уже указан
  атрибут fill со значением 'none' или начинается с 'url')
 */
:where([fill]:not([fill=none],
[fill^=url])) {
  fill: currentColor;
}

/**
  Приводим к единому цвету svg-элементы
  (за исключением тех, у которых уже указан
  атрибут stroke со значением 'none')
 */
:where([stroke]:not([stroke=none],
[stroke^=url])) {
  stroke: currentColor;
}

/**
  Чиним баг задержки смены цвета при взаимодействии с svg-элементами
 */
svg * {
  transition-property: fill, stroke;
}

/**
  Приведение рамок таблиц в классический 'collapse' вид
 */
:where(table) {
  border-collapse: collapse;
  border-color: currentColor;
}

/**
  Удаляем все анимации и переходы для людей,
  которые предпочитают их не использовать
 */
@media (prefers-reduced-motion: reduce) {
  *,
  ::before,
  ::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
:root {
  --color-dark: #000;
  --color-dark-alternate: #131619;
  --color-light: #fff;
  --color-dark-grey: #404040;
  --color-light-grey: #c4c4c4;
  --border-radius: 30px;
  --border: 1px solid var(--color-light);
  --font-family-base: "Heebo", sans-serif;
  --font-family-accent: "Yantramanav", sans-serif;
  --input-height: 54px;
  --container-width: 1300px;
  --container-padding-x: 15px;
  --transition-duration: 0.2s;
}

.list-reset {
  margin: 0;
  padding: 0;
  list-style: none;
}

.button {
  display: inline-flex;
  align-items: center;
  height: 38px;
  padding-inline: 26px;
  line-height: 2;
  letter-spacing: 1.2px;
  text-transform: uppercase;
  border-color: var(--color-light);
  border: none;
  border-radius: var(--border-radius);
  white-space: nowrap;
}
.button:hover {
  background-color: var(--color-light-grey);
}

@media (max-width: 767px) {
  .button {
    padding-inline: 10px;
  }
}
.wrapper {
  max-width: calc(var(--container-width) + var(--container-padding-x) * 2);
  margin-inline: auto;
  padding-inline: var(--container-padding-x);
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding-inline: 32px;
}
.header__actions {
  display: flex;
  -moz-column-gap: 40px;
       column-gap: 40px;
}
.header__logotype {
  display: flex;
  align-items: center;
  flex-shrink: 0;
}
.header__burger {
  display: inline-flex;
  justify-content: center;
  flex-direction: column;
  row-gap: 4px;
  padding-left: 8px;
  width: 40px;
  aspect-ratio: 1;
  background-color: transparent;
  border: var(--border);
  color: var(--color-light);
  border-radius: var(--border-radius);
}
.header__burger:hover {
  color: var(--color-light-grey);
  border-color: currentColor;
}
.header__burger-button-line {
  width: 6px;
  height: 1px;
  background-color: currentColor;
  box-shadow: 15px 0 0 currentColor;
}

@media (max-width: 1024px) {
  .header {
    flex-wrap: wrap;
    padding-top: 20px;
    row-gap: 10px;
    padding-inline: 15px;
    background-color: var(--color-dark-alternate);
  }
  .main-navigation {
    order: 1;
    flex-basis: 100%;
  }
  .main-navigation__link {
    height: 50px;
  }
}
@media (max-width: 767px) {
  .header {
    padding-top: 10px;
  }
  .header__actions {
    -moz-column-gap: 15px;
         column-gap: 15px;
  }
  .main-navigation__list {
    -moz-column-gap: 24px;
         column-gap: 24px;
  }
  .main-navigation__link {
    height: 32px;
  }
}
.main-navigation__list {
  display: flex;
  flex-wrap: wrap;
  -moz-column-gap: 50px;
       column-gap: 50px;
}
.main-navigation__link {
  display: inline-flex;
  align-items: center;
  height: 90px;
  text-decoration: none;
  text-transform: uppercase;
  font-weight: 700;
  font-size: 12px;
  letter-spacing: 1.2px;
  -moz-column-gap: 7px;
       column-gap: 7px;
}
.main-navigation__link.is-current::after {
  content: "";
  width: 5px;
  height: 5px;
  aspect-ratio: 1;
  background-color: currentColor;
  border-radius: 50%;
  display: grid;
}

@media (max-width: 1024px) {
  .header {
    flex-wrap: wrap;
    padding-top: 20px;
    row-gap: 10px;
    padding-inline: 15px;
  }
  .main-navigation {
    order: 1;
    flex-basis: 100%;
  }
  .main-navigation__link {
    height: 50px;
  }
}
@media (max-width: 767px) {
  .header {
    padding-top: 10px;
  }
  .header__actions {
    -moz-column-gap: 15px;
         column-gap: 15px;
  }
  .main-navigation__list {
    -moz-column-gap: 24px;
         column-gap: 24px;
  }
  .main-navigation__link {
    height: 32px;
  }
}/*# sourceMappingURL=style.css.map */